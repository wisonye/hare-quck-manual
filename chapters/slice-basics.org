* Slice basics

** Overview

=Array= (=[X]T=) is fixed in size =X= and compile time size known.

=Slice= (=[]T=) is grow-able size and runtime size known, you can treat it as a dynamic array.

Here is the internal =slice= data type:

#+BEGIN_SRC bash
  haredoc types::slice

  # // A type representing the internal structure of slices, useful for low-level
  # // slice manipulation.
  # type slice = struct {
  #         // The slice contents.
  #         data: nullable *opaque,
  #         // The number of members of the slice.
  #         length: size,
  #         // The allocated capacity (in members) of data.
  #         capacity: size,
  # };
#+END_SRC

As you can see, it's a very regular dynamic-array/vector struct implementation.

But if you create a slice from an array, the slice is non-growable, it is just another form to access the parent array!!!


** Array (=[X]T=) can be converted to slice (=[]T=) automatically in the following situations

=array -> slice=
=&array -> slice=
=*array -> slice=

#+BEGIN_SRC hare
  //
  // Function that accepts a slice
  //
  fn print_array(arr: []u8) void = {};

  //
  // Fixed size array
  //
  const arr = [0x01u8, 0x02, 0x03];

  // Pointer to an array
  const arr_ptr: *[3]u8 = &arr;

  //
  // Array converts to slice
  //
  print_array(arr);
  print_array(&arr);
  print_array(arr_ptr);
#+END_SRC


** Slice from an array is non-growable by using =append/insert/delete=!!!

#+BEGIN_SRC hare
  const arr = [1u8, 2, 3, 4];
  let slice: []u8 = arr;

  //
  // None of these work!!!
  //
  insert(slice[0], 0xFF);
  // append(slice, 0xFF);
  // delete(slice[0]);
#+END_SRC

Error output:

#+BEGIN_SRC bash
  main.ha(59531) in realloc(): bogus pointer (double free?) 0x7376e806e8
  Abort trap (core dumped)  
#+END_SRC


If you want a growable slice, read the next chapter.


** Slice assignment

You'are able to assign multiple values to the given slice by the following syntax, it works like using the =memmove= in =C=:

#+BEGIN_SRC hare
  fn print_slice(slice: []u8) void = {
          fmt::printfln(">>> [ print_slice ] - len: {}, value:", len(slice))!;
          for (let index = 0z; index < len(slice); index += 1) {
                  fmt::printfln(">>>\tslice[{}]: 0x{:X.2}", index, slice[index])!;

          };
  };

  export fn main() void = {
          const arr = [0xAAu8, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF];
          print_slice(&arr);

          //
          // Assign `arr[1] ~ arr[3]` (3 elements) to the given values (fill with `0x11`)
          //
          arr[1..4] = [0x11...];
          print_slice(&arr);

          //
          // Assign `arr[1] ~ arr[3]` (3 elements) to the given values
          //
          arr[1..4] = [0x11, 0x22, 0x33];
          print_slice(&arr);
  };
#+END_SRC


** How to get back the underlying =types::slice= type

Internal type definition:

#+BEGIN_SRC hare
  type slice = struct {
          // The slice contents.
          data: nullable *opaque,
          // The number of members of the slice.
          length: size,
          // The allocated capacity (in members) of data.
          capacity: size,
  };
#+END_SRC

Even though, you can't convert a slice (instance) into =types::slice= (struct type) directly!!!

For example:

#+BEGIN_SRC hare
  const arr = [1u8, 2, 3, 4];
  const slice: []u8 = arr;

  // This is NOT allowed!!!
  const underlying_slice = slice: types::slice;
#+END_SRC

Output error:

#+BEGIN_SRC bash
  temp/src/main.ha:27:46: error: Invalid cast from const []u8 to types::slice

  27 |            const underlying_slice = slice: types::slice;
#+END_SRC

But you can convert a =*[]T= back to =*types::slice=, this allows you to access the underlying slice struct fields:

#+BEGIN_SRC hare
  const arr = [1u8, 2, 3, 4];
  const slice: []u8 = arr;

  // Convert `*[]T` to `*types::slice`
  const slice_ptr = &slice: *types::slice;
  fmt::printfln(">>> slice - capacity: {}, len: {}, data ptr: {}",-
         slice_ptr.capacity,
         slice_ptr.length,
         slice_ptr.data)!;
#+END_SRC

Output:

#+BEGIN_SRC bash
  >>> slice - capacity: 4, len: 4, data ptr: 0x797579fbe0  
#+END_SRC


** How to prove a slice is just holding a pointer to an array but not an entire copy

#+BEGIN_SRC hare
  type slice = struct {
          // The slice contents.
          data: nullable *opaque,
          // The number of members of the slice.
          length: size,
          // The allocated capacity (in members) of data.
          capacity: size,
  };
#+END_SRC


*** Slice's internal data address should be the same as array's address

So, you can print out the array's address and slice's internal data address to prove that.

#+BEGIN_SRC hare
  use types;

  const arr = [0x01u8, 0x02, 0x03];

  //
  // Slice from `arr`
  //
  let slice: []u8 = arr[..];
  //
  // Try to get back the slice's data (`nullable *opaque`)
  //
  // let slice_interal_data = (*(&slice: *types::slice)).data;
  let slice_internal_data = (&slice: *types::slice).data;

  fmt::printfln(">>> arr address: {}", &arr)!;
  fmt::printfln(">>> slice address: {}", &slice)!;
  fmt::printfln(">>> slice internal address: {}", slice_internal_data)!;
  fmt::printfln(">>> arr address == slice internal address: {}", &arr == slice_internal_data)!;
#+END_SRC


Output:

#+BEGIN_SRC bash
  >>> arr address: 0x695973482c              # Same
  >>> slice address: 0x69597349b0
  >>> slice internal address: 0x695973482c   # Same
  >>> arr address == slice internal address: true
#+END_SRC



*** Modify underlying array will affect its slice

#+BEGIN_SRC hare
  // Change underlying array value
  arr[1] = 0xFF;

  fmt::printfln(">>> slice len: {}, value:", len(slice))!;
  for( let index=0z; index < len(slice); index +=1) {
          fmt::printfln(">>> slice[{}]: 0x{:X}", index, slice[index])!;
  };
#+END_SRC

Output:

#+BEGIN_SRC bash
  >>> slice len: 3, value:
  >>> slice[0]: 0x1
  >>> slice[1]: 0xFF  # If array changes, then slice changes.
  >>> slice[2]: 0x3
#+END_SRC


** Automatic dereference when accessing slice by index

#+BEGIN_SRC hare
  const arr = [0x01u8, 0x02, 0x03];

  //
  // A pointer to a slice
  //
  let slice: *[]u8 = &arr[..];

  //
  // You don't need to to `(*slice)[1]`
  //
  // const a = (*slice)[1];
  const a = slice[1];
  fmt::printfln(">>> a: {}", a)!;
#+END_SRC

