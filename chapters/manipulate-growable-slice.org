* Manipulate growable slice by using =append, insert, and delete=

You CAN'T manipulate a slice that converts from a fixed array, as the underlying array is fixed-size, non-growable!!!

That's why the following code won't work!!!

#+BEGIN_SRC hare
  //
  // slice converts from array is non-growable!!!
  //
  let slice: []u8 = arr[..];
  let slice: []u8 = [1, 2, 3, 4];

  // This will crash!!!
  delete(slice[0]);
  insert(slice[0], 0xFF);
  append(slice, 0xCC);
#+END_SRC


There are 2 ways to manipulate a growable slice:

** Heap-allocated slice

*** Create a empty heap-allocated slice (capacity is 0)

#+BEGIN_SRC hare
  //
  // Empty and heap-allocated growable slice,
  // that's you should `free` it.
  let slice: []u8 = [];
  defer free(slice);

  fmt::printfln(">>> slice capacity: {}",  (&slice: *types::slice).capacity)!;

  append(slice, 0xCC);
  append(slice, 0xDD);
  append(slice, 0xEE);
  append(slice, 0xFF);
  delete(slice[0]);       // Remove 0xCC
  insert(slice[0], 0xAA); // Insert 0xAA
#+END_SRC


Output:

#+BEGIN_SRC bash
  >>> slice capacity: 0
  >>> [ print_slice ] - len: 4, value: 
  >>>	slice[0]: 0xAA
  >>>	slice[1]: 0xDD
  >>>	slice[2]: 0xEE
  >>>	slice[3]: 0xFF
#+END_SRC


*** Create a heap-allocated slice (capacity is pre-allocated)

****  =let slice: []u8 = alloc([], 5);=

Allocate a empty slice on the heap, capacity to =5=, len is =0=.

#+BEGIN_SRC hare
  let slice: []u8 = alloc([], 5);
  defer free(slice);
  fmt::printfln(">>> slice capacity: {}",  (&slice: *types::slice).capacity)!;

  print_slice(slice);
#+END_SRC


Output:

#+BEGIN_SRC bash
  >>> slice capacity: 5
  >>> [ print_slice ] - len: 0, value: 
#+END_SRC


****  =let slice: []u8 = alloc([0...], 5);=

Allocate a initialized slice on the heap, capacity to =5=, len is =5=, filled with the given value (=0=).

#+BEGIN_SRC hare
  let slice: []u8 = alloc([0...], 5);
  // let slice: []u8 = alloc([0xFF...], 5); // Fill with 0xFF
  defer free(slice);
  fmt::printfln(">>> slice capacity: {}",  (&slice: *types::slice).capacity)!;

  print_slice(slice);
#+END_SRC


Output:

#+BEGIN_SRC bash
  >>> slice capacity: 5
  >>> [ print_slice ] - len: 5, value: 
  >>>	slice[0]: 0x0
  >>>	slice[1]: 0x0
  >>>	slice[2]: 0x0
  >>>	slice[3]: 0x0
  >>>	slice[4]: 0x0
#+END_SRC


****  =let slice: []u8 = alloc([0xAA, 0xBB, 0xCC]);=

Allocate a initialized slice on the heap, capacity to =3=, len is =3=, init with given values: =0xAA, 0xBB, 0xCC=.

#+BEGIN_SRC hare
  let slice: []u8 = alloc([0xAA, 0xBB, 0xCC]);
  defer free(slice);
  fmt::printfln(">>> slice capacity: {}",  (&slice: *types::slice).capacity)!;

  print_slice(slice);
#+END_SRC


Output:

#+BEGIN_SRC bash
  >>> slice capacity: 3
  >>> [ print_slice ] - len: 3, value: 
  >>>	slice[0]: 0xAA
  >>>	slice[1]: 0xBB
  >>>	slice[2]: 0xCC
#+END_SRC


** Stack-allocated slice

You can create a slice on top of a stack-allocated buffer but make sure to slice with =[..0]= which means slice with 0 elements, that causes the underlying =slice.length = 0= but keep the =slice.capacity= to the whole length of the given stack-allocated buffer!!!

Example:

#+BEGIN_SRC hare
  use fmt;
  use types:

  def STACK_BUFFER_LEN: size = 10;

  fn stack_allocated_slice() void = {
        const stack_buffer: [STACK_BUFFER_LEN]u8 = [0x00...];

        //
        // Create a slice on top of the `stack_buffer`
        // `..0` means slice with 0 elements, that causes the underlying `slice.length = 0`
        // but keep the `slice.capacity = STACK_BUFFER_LEN`!!!
        //
        let list: []u8 = stack_buffer[..0];

        //
        // Get back the `types::slice` underlying struct fields
        //
        const list_data = (&list: *types::slice).data;
        const list_len = (&list: *types::slice).length;
        const list_cap = (&list: *types::slice).capacity;

        //
        // `stack_buffer address` and `list.data` should be the same address!!!
        //
        fmt::printfln(">>> stack_buffer address:\t{}, len: {}", &stack_buffer, len(stack_buffer))!;
        fmt::printfln(">>> list.data:\t\t\t{}, list.length: {}, list.capacity: {}",
            list_data, list_len, list_cap)!;

        //
        // `static` keyword here, which prevents Hare from re-allocating a slice
        // if it has insufficient storage space to perform the desired operation.
        //
        static append(list, 10);
        static insert(list[0], 20);

        print_slice(list);
  };

  //
  //
  //
  export fn main() void = {
        stack_allocated_slice();
  };
#+END_SRC


Output:

#+BEGIN_SRC bash
  >>> stack_buffer address:    0x7ffeb9679544, len: 10
  >>> list.data:               0x7ffeb9679544, list.length: 0, list.capacity: 10
  >>> [ print_slice ] - len: 2, value:
  >>>	slice[0]: 20
  >>>	slice[1]: 10
#+END_SRC


** Handy arena-liked pointer pool

Although you're able to use =defer= to =free= any allocated pointers, sometimes you want to let them live longer which lifetime is outside the current block scope, that's a bit of trouble in those cases, as you need to save that pointer somewhere else and call free at the right time.

That's why the following =AllocatedPointerPool= comes to the rescue, as you have a centre place to save all allocated pointers and you don't need to care about passing those pointers back and forth and freeing them manually.

Here is the =AllocatedPointerPool= implementation, it's very simple:

#+BEGIN_SRC hare
  // -------------------------------------------------------------------------------
  // Allocated Pointer Pool
  // -------------------------------------------------------------------------------
  export type AllocatedPointerPool = struct {
          ptrs: []nullable *opaque,
          already_freed: bool,
  };

  //
  // Create pointer pool with the given capacity
  //
  export fn init(capacity: size) AllocatedPointerPool = {
          return AllocatedPointerPool  {
                  ptrs = alloc([], capacity),
                  already_freed = false,
          };
  };

  //
  // Free all pointers at once
  //
  export fn deinit(self: *const AllocatedPointerPool) void = {
          if (self.already_freed) return;

          self.already_freed = true;

          //
          // Call `free` on all ptrs
          //
          const length = len(self.ptrs);
          const freed_count = 0;
          for (let index = 0z; index < length; index += 1) {
                  match (self.ptrs[index]) {
                          case null => yield;
                          case let temp_ptr: *opaque => {
                                  free(temp_ptr);
                                  freed_count += 1;
                                  fmt::printfln(">>> [ AllocatedPointerPool > deinit ] - freed: {}", temp_ptr)!;
                          };
                  };
          };

          //
          // Free `_ptrs` itself.
          //
          free(self.ptrs);

          fmt::printfln(">>> [ AllocatedPointerPool > deinit ] - free {} allocated resources and itself: {}",
                  freed_count, &self.ptrs)!;
  };

  //
  // Add allocated pointer to the pool
  //
  export fn add(self: *AllocatedPointerPool, ptr: *opaque) void = {
          append(self.ptrs, ptr);
  };

  //
  // Debug purposes
  //
  export fn debug_print(self: *const AllocatedPointerPool) void = {
          fmt::printfln(
                  ">>> [ AllocatedPointerPool > debug_print ] - ptr slice len: {}, _ptrs: {}",
                  len(self.ptrs), &self.ptrs)!;
          for (let index = 0z; index < len(self.ptrs); index += 1) {
                  fmt::printfln(">>>\t_ptrs[{}]: {}", index, self.ptrs[index])!;
          };
  };
#+END_SRC


So, here is the usage pattern:

#+BEGIN_SRC hare
  use arena = allocated_pointer_pool;

  //
  // Create `AllocatedPointerPool` at the top block scope you wanted
  //
  let ptr_pool = arena::init(10);
  defer arena::deinit(&ptr_pool);

  //
  // Call `arena::add(&ptr_pool, ptr);` everywhere you needed and that's it:)
  //
#+END_SRC


Example:

#+BEGIN_SRC hare
  fn allocated_on_the_heap(ptr_pool: *arena::AllocatedPointerPool) void = {
          for( let index=0z; index < 5; index +=1) {
                  const temp_ptr: *size = alloc(index);
                  arena::add(ptr_pool, temp_ptr);
          };
  };

  //
  //
  //
  export fn main() void = {
          let ptr_pool = arena::init(10);
          defer arena::deinit(&ptr_pool);

          const int_ptr: *opaque = alloc(88);
          arena::add(&ptr_pool, int_ptr);

          const f32_ptr: *opaque = alloc(123.1234f32);
          arena::add(&ptr_pool, f32_ptr);

          fmt::printfln(">>> int_ptr: {}, value: {}", int_ptr, *(int_ptr: *int))!;
          fmt::printfln(">>> f32_ptr: {}, value: {}", f32_ptr, *(f32_ptr: *f32))!;

          allocated_on_the_heap(&ptr_pool);

          arena::debug_print(&ptr_pool);
  };
#+END_SRC

Output:

#+BEGIN_SRC bash
  >>> int_ptr: 0x3363e22050a0, value: 88
  >>> f32_ptr: 0x3363e22050b0, value: 123.1234
  >>> [ AllocatedPointerPool > debug_print ] - ptr slice len: 7, _ptrs: 0x8a0f1f2b8
  >>>	_ptrs[0]: 0x3363e22050a0
  >>>	_ptrs[1]: 0x3363e22050b0
  >>>	_ptrs[2]: 0x3363e22050c0
  >>>	_ptrs[3]: 0x3363e22050d0
  >>>	_ptrs[4]: 0x3363e22050e0
  >>>	_ptrs[5]: 0x3363e22050f0
  >>>	_ptrs[6]: 0x3363e2205100
  >>> [ AllocatedPointerPool > deinit ] - freed: 0x3363e22050a0
  >>> [ AllocatedPointerPool > deinit ] - freed: 0x3363e22050b0
  >>> [ AllocatedPointerPool > deinit ] - freed: 0x3363e22050c0
  >>> [ AllocatedPointerPool > deinit ] - freed: 0x3363e22050d0
  >>> [ AllocatedPointerPool > deinit ] - freed: 0x3363e22050e0
  >>> [ AllocatedPointerPool > deinit ] - freed: 0x3363e22050f0
  >>> [ AllocatedPointerPool > deinit ] - freed: 0x3363e2205100
  >>> [ AllocatedPointerPool > deinit ] - free 7 allocated resources and itself: 0x8a0f1f2b8
#+END_SRC
