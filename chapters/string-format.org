* String format

Detail description: =haredoc fmt=

In a summary:

There is =formattable= type defined in =$HARE_PATH/fmt/iter.ha= that converts all data types:

#+BEGIN_SRC hare
  // Tagged union of all types which are formattable.
  export type formattable = (...types::numeric | uintptr | str | rune | bool |
          nullable *opaque | void);
#+END_SRC

And there is a =format_raw= function deinfed in =$HARE_PATH/usr/local/share/hare/stdlibS/fmt/print.ha= like this:

#+BEGIN_SRC hare
  fn format_raw(
          out: io::handle,
          arg: formattable,
          mod: *mods,
  ) (size | io::error) = match (arg) {
#+END_SRC

That said the ={}= placeholder in =fmt::printfln("{}", xxx)= is able to print all data types without any specific =modifier= needed, that's pretty cool!!!

The rest content shows you how to do extra format control on top of the default ={}= placeholder:

** Format float value with the given decimals

~:f.X~: =X= is the decimals count

#+BEGIN_SRC hare
  const f1: f32 = 8.3456;
  const d1: f64= 7.123456;
  fmt::printfln(">>> f1: {:f.2}", f1)!;
  fmt::printfln(">>> d1: {:f.3}", d1)!;
#+END_SRC

#+BEGIN_SRC bash
  >>> f1: 8.35
  >>> d1: 7.123
#+END_SRC


** Format binary

- ~:b~

- ~:b.8~

    - ~b~ output integer value in binary notation
    - ~.~ means the fill with =0=
    - ~8~ means the width (how many chars to fill with fill char)

#+BEGIN_SRC hare
	const a = 4;
	fmt::printfln(">>> a: 0b{:b.4}", a)!;
	fmt::printfln(">>> a: 0b{:b.8}", a)!;
#+END_SRC

#+BEGIN_SRC bash
  >>> a: 0b0100
  >>> a: 0b00000100
#+END_SRC


** Format HEX

- ~:x~ (lowercase) or ~:X~ (uppercase)

- ~:X.2~: fixed width
    - ~.~ means the fill with =0=
    - ~2~ means the width (how many chars to fill with fill char)

#+BEGIN_SRC hare
  const a: u8= 0x0A;
  const b: u32= 0x0123;

  fmt::printfln(">>> a: 0x{:X.2}", a)!;
  fmt::printfln(">>> b: 0x{:X.8}", b)!;
#+END_SRC

#+BEGIN_SRC bash
  >>> a: 0x0A
  >>> b: 0x00000123
#+END_SRC


** Format to the given buffer

*** =bsprintf=

=bsprintf=: If the given buffer is smaller than the format string, it will crash with error:

#+BEGIN_SRC bash
  Abort: fmt/wrappers.ha:40:46: error occurred 
#+END_SRC

But it doesn't tell you where your code caused the crash!!!


Example:

#+BEGIN_SRC hare
  const age: u8= 0x88;

  let age_buffer: [20]u8 = [0x00...];
  const age_msg = fmt::bsprintf(&age_buffer, "age in hex: 0x{:X.2}", age);
  fmt::printfln(">>> age_msg: {}", age_msg)!;
#+END_SRC

#+BEGIN_SRC bash
  >>> age_msg: age in hex: 0x88
#+END_SRC


*** =memio::dynamic= 

=memio::dynamic=: heap-allocated dynamic buffer and you must free the internal buffer by calling =io::close()=!!!

Example:

#+BEGIN_SRC hare
  use fmt;
  use io;
  use memio;

  export fn main() void = {
          const int_value = 10;
          const float_value = 12.1234f32;
          const string_value = "Hello from Hare:)";

          let heap_buffer: memio::stream = memio::dynamic();
          defer io::close(&heap_buffer)!;

          fmt::fprintf(&heap_buffer, ">>> int_value: {}", int_value)!;
          fmt::fprintf(&heap_buffer, ", float_value: {:f.3}", float_value)!;
          fmt::fprintf(&heap_buffer, ", string_value: {}", string_value)!;

          fmt::printfln("{}", memio::string(&heap_buffer)!)!;
  };
#+END_SRC


*** =memio::fixed=

=memio::fixed=: stack-allocated, rely on the given buffer, you don't need to close the =stream=!

But writes (e.g. =fmt::fprintf=) return an error if they would exceed the buffer's capacity.

Example:

#+BEGIN_SRC hare
  use fmt;
  use io;
  use memio;

  export fn main() void = {
          const int_value = 10;
          const float_value = 12.1234f32;
          const string_value = "Hello from Hare:)";

          let debug_msg_buffer: [128]u8 = [0x00...];
          let fixed_buffer = memio::fixed(&debug_msg_buffer);

          fmt::fprintf(&fixed_buffer, ">>> int_value: {}", int_value)!;
          fmt::fprintf(&fixed_buffer, ", float_value: {:f.3}", float_value)!;
          fmt::fprintf(&fixed_buffer, ", string_value: {}", string_value)!;
          fmt::printfln("{}", memio::string(&fixed_buffer)!)!;
  };
#+END_SRC
